// You are going from City A to City B. The distance between A and B is S km. In the most days, you can go at most X  km one day. But there are N  exceptions, in the Tith day, you can go at most Yi km. You need to find out the minimum number of days required to reach city B from city A

// Input Format
// First-line contains three integers, S, X, N (1≤S, X≤109,0≤N≤103). The (i+1)th line contains two integers Ti,Yi(1≤Ti,Yi≤109). It's guaranteed any two Ti are different. Note that Ti is not sorted. It is a time complexity-based question. So need an efficient algorithm. The time limit is 1 second

// Sample Input

// 21 5 2
// 2 4
// 4 8
// Sample Output
// 4
// Explanation:

// In the first day, you walked 5 km.

// In the second day, you walked 4 km.

// In the third day, you walked 5 km.

// In the fourth day, you walked 7 km and arrived.

// Input:              Result:
	
// 21 5 2              4 
// 2 4
// 4 8


// 41805239 2 480      20902410
// 7858902 5
// 7125293 1
// 5166287 4
// 9279088 1
// 9086853 2
// 472353 2
// 2494704 3
// 2560495 1
// 13357155 3
// 10434334 1
// 7737574 5
// 10785653 1
// 14481519 3
// 1749634 4
// 19809682 1
// 7068033 5
// 8479394 2
// 6289808 4
// 10788994 5
// 1710895 2
// 17393496 3
// 15342279 1
// 17896739 2
// 16025973 5
// 11830211 1
// 18375284 2
// 2382830 1
// 6546925 3
// 11011653 5
// 7548471 3
// 3243694 2
// 15972990 2
// 1763507 5
// 2247773 1
// 5782313 4
// 16262667 2
// 16530515 3
// 16241325 2
// 19594205 5
// 8569520 5
// 13082557 3
// 19316448 5
// 5535443 3
// 9494866 2
// 19262575 4
// 5789327 3
// 13906172 3
// 14740310 5
// 7442395 1
// 14517210 3
// 19129830 1
// 10582539 2
// 1686589 5
// 4617725 2
// 7616941 1
// 15591170 4
// 13978816 2
// 15441398 2
// 7856717 4
// 18331531 3
// 12683817 3
// 18130698 4
// 4603556 5
// 12658948 4
// 20515076 2
// 7044621 4
// 10977075 4
// 226879 4
// 2663604 5
// 19987173 3
// 5386576 1
// 12593366 1
// 17517065 2
// 18357568 1
// 7170483 4
// 13666629 3
// 12598066 5
// 2820281 3
// 3662728 3
// 6378956 1
// 2498007 3
// 18130222 1
// 14636957 4
// 1209264 4
// 11336894 3
// 6710589 1
// 17327810 4
// 11920324 2
// 17412424 4
// 14835384 1
// 11825627 4
// 15075327 1
// 4525151 2
// 265995 3
// 15641974 2
// 16164974 1
// 10039484 1
// 17209983 1
// 2423608 3
// 19093589 1
// 6936316 5
// 20700023 2
// 16290243 4
// 20887257 2
// 7797877 5
// 6588113 2
// 3138219 3
// 14110249 3
// 8598104 1
// 8400348 2
// 18132307 2
// 15545703 4
// 6763295 1
// 4079130 3
// 19720231 1
// 12707810 5
// 6569150 1
// 17324849 1
// 3385231 2
// 7847176 3
// 15426996 5
// 12264484 4
// 9202876 5
// 12776959 5
// 20348897 4
// 15768013 3
// 6957995 3
// 9503707 2
// 11940123 4
// 8662762 5
// 12370236 4
// 19592431 5
// 7120064 4
// 3019702 5
// 10922425 3
// 19767338 4
// 15703012 1
// 10456412 1
// 13574074 5
// 507654 3
// 14791978 5
// 18148301 5
// 19170102 2
// 3445988 5
// 16745998 4
// 13120964 5
// 11536593 1
// 1810121 4
// 3735133 1
// 6837499 5
// 10179934 1
// 7365613 4
// 13319990 3
// 15502973 4
// 14677021 3
// 3379693 2
// 20465002 2
// 7418900 3
// 5376008 4
// 18685936 2
// 8494666 4
// 11161371 5
// 9328347 2
// 2358087 2
// 16276211 2
// 4481623 1
// 11604510 1
// 7682323 4
// 9076947 3
// 19128224 4
// 8103720 1
// 16347512 3
// 16744510 3
// 5783983 2
// 14828144 1
// 11284210 3
// 9145848 5
// 16789603 3
// 4918766 5
// 2113958 4
// 17993704 2
// 7304314 4
// 1874313 2
// 18795588 2
// 17549016 5
// 12549887 3
// 2193220 5
// 8401156 1
// 2400446 4
// 16096921 5
// 10204188 5
// 13562651 3
// 12662912 2
// 657480 2
// 2454422 5
// 5504413 1
// 12241705 5
// 9725613 2
// 11116291 1
// 18305346 1
// 4314060 2
// 4052220 4
// 12381561 2
// 11728504 5
// 16433242 1
// 8862478 1
// 16507838 3
// 5686481 2
// 3660733 1
// 8616159 2
// 13309950 2
// 12090968 1
// 3054314 5
// 7815683 3
// 9533611 5
// 9779191 5
// 14698138 5
// 3536835 1
// 1823671 1
// 6426356 2
// 12363186 2
// 5585146 5
// 14038814 3
// 12403670 1
// 19949717 3
// 14584939 1
// 17448728 4
// 8730699 3
// 13531354 2
// 20066360 4
// 10810998 1
// 10436338 2
// 18805041 1
// 3874839 5
// 11351374 1
// 9302213 3
// 12584646 2
// 8713530 4
// 11358594 5
// 9340414 5
// 3280914 3
// 15035864 1
// 1963890 1
// 8182799 2
// 10362083 3
// 19459224 4
// 10481869 1
// 11760988 3
// 3549526 2
// 5040908 4
// 8547226 5
// 19103993 2
// 3820201 1
// 16696305 4
// 837193 1
// 11350512 4
// 3731633 3
// 15733771 5
// 759885 2
// 571823 4
// 5690311 4
// 1397528 4
// 11143861 2
// 2397560 1
// 6138105 1
// 10947370 5
// 9863246 1
// 14134207 3
// 12793544 2
// 14314168 3
// 8559826 5
// 15097112 1
// 6899962 3
// 8709979 1
// 5324709 4
// 9730951 5
// 20015295 4
// 12611931 2
// 7304577 2
// 13351226 4
// 17978698 5
// 3999298 3
// 8277775 1
// 4116456 1
// 9653959 3
// 5505265 1
// 18228026 1
// 2382466 5
// 19933848 1
// 5251564 2
// 12217965 3
// 18079796 1
// 14941587 3
// 10000693 5
// 5923748 4
// 15696803 3
// 17932048 2
// 14435575 3
// 19249785 2
// 14713498 3
// 17910098 2
// 14669570 4
// 18451093 1
// 17098899 4
// 12054693 2
// 2912087 2
// 9516002 3
// 16334453 3
// 20816747 4
// 17107587 1
// 5838297 4
// 17383645 1
// 9476373 2
// 9280893 1
// 11410580 1
// 3982296 4
// 12073336 2
// 20532959 4
// 10519835 2
// 17992846 2
// 7934183 4
// 16278871 5
// 5914257 1
// 13404930 1
// 11381158 1
// 4126852 5
// 3150249 1
// 429486 1
// 2256107 3
// 6723512 2
// 17873944 3
// 8495755 5
// 6918307 1
// 18789534 2
// 16049235 1
// 2808971 3
// 9766635 3
// 4334948 2
// 7176656 3
// 18691212 5
// 507389 2
// 11064156 5
// 16442260 2
// 4629218 3
// 11918067 2
// 114681 4
// 11698808 1
// 18156373 3
// 15382745 5
// 4692605 2
// 4471471 3
// 19262591 1
// 10397873 1
// 8158039 4
// 13100776 1
// 2631082 5
// 8070389 4
// 5927776 1
// 17567622 2
// 17686652 5
// 10663541 4
// 13197668 2
// 17133865 2
// 12515276 5
// 14798135 2
// 328368 3
// 9471821 3
// 270080 4
// 10898093 1
// 5447831 3
// 5300116 1
// 14178264 2
// 2889675 3
// 18796443 5
// 925795 4
// 14404552 4
// 10858768 2
// 13980375 5
// 3990239 4
// 5612296 3
// 9400961 4
// 19666785 1
// 12552758 3
// 12328949 2
// 799774 2
// 6386952 4
// 16545170 4
// 8422931 1
// 16910494 1
// 7751497 4
// 7662014 2
// 12044738 1
// 9969750 3
// 3117488 4
// 911482 4
// 8778556 2
// 7306398 3
// 17711006 4
// 15540930 2
// 4751931 4
// 6470594 2
// 20586162 5
// 4233472 1
// 16716433 5
// 2477373 2
// 8426679 2
// 13544292 2
// 19706879 1
// 19304141 4
// 16879778 1
// 18422606 1
// 7610164 1
// 11659580 2
// 660514 5
// 19750076 3
// 45332 4
// 935271 5
// 19755866 4
// 18790327 3
// 5026325 4
// 9190367 4
// 10847168 4
// 9113069 1
// 10596054 5
// 4436542 3
// 17351402 5
// 16923966 4
// 8997520 1
// 6294181 4
// 10494722 5
// 15985298 4
// 2557571 3
// 14989110 4
// 5867415 3
// 3294735 1
// 2649064 5
// 1333229 2
// 6589964 3
// 16270921 4
// 10241059 5
// 1873785 5
// 17780082 3
// 5816456 2
// 17155084 1
// 4301942 2
// 9389141 5
// 17630630 2
// 9451609 4
// 5181839 5
// 3346602 2
// 10344868 4
// 7397740 1
// 4453891 2
// 2109376 3
// 9083296 1
// 18337371 1
// 10327226 1
// 12029977 3
// 7182474 2
// 2755793 4
// 3841595 5
// 16234599 3
// 6789921 2
// 15214464 3
// 19832501 3
// 4303378 3
// 16058177 1
// 12285812 3
// 8100817 4
// 15440030 3
// 13814861 4
// 16389813 1
// 282492 3
// 3487408 5
// 11660393 4
// 7378623 3
// 20177748 1
// 17376709 4
// 6629975 3
// 1628719 5




import java.util.*;
public class Distance_Between_Cities{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        long S=sc.nextLong();
        long X=sc.nextLong();
        int N=sc.nextInt();
        Map<Long,Long>exc=new HashMap<>();
        for(int i=0;i<N;i++)
        {
            long Ti=sc.nextLong();
            long Yi=sc.nextLong();
            exc.put(Ti,Yi);
        }
        long remainD=S;
        long day=0;
        while(remainD>0)
        {
            day++;
            if(exc.containsKey(day))
            {
                remainD-=exc.get(day);
            }
            else
            {
                remainD-=X;
            }
        }
        System.out.println(day);
        sc.close();
    }
}